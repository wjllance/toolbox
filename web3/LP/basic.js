// ‰ΩøÁî® viem Êõø‰ª£ ethers.js ÂÆûÁé∞ uniswap rebalance ‰∫§ÊòìÂàÜÊûê
import { createPublicClient, http, parseAbi, decodeEventLog } from "viem";
import { base } from "viem/chains";
import Bottleneck from "bottleneck";

// =============== ÈÖçÁΩÆ ===============
console.log("üöÄ ÂàùÂßãÂåñÂÆ¢Êà∑Á´Ø...");

// RPC ËäÇÁÇπÈÖçÁΩÆ
const RPC_URLS = [
  process.env.RPC_URL,
  "https://base-mainnet.g.alchemy.com/v2/demo",
  "https://base.blockpi.network/v1/rpc/public",
  "https://base.meowrpc.com",
];

// ÂàõÂª∫Â§ö‰∏™ÂÆ¢Êà∑Á´ØÂÆû‰æã
const clients = RPC_URLS.map((url) =>
  createPublicClient({
    chain: base,
    transport: http(url),
  })
);

let currentClientIndex = 0;

// =============== Â∑•ÂÖ∑ÂáΩÊï∞ ===============
function getCurrentClient() {
  return clients[currentClientIndex];
}

function switchClient() {
  currentClientIndex = (currentClientIndex + 1) % clients.length;
  console.log(`üîÑ ÂàáÊç¢Âà∞ RPC ËäÇÁÇπ ${currentClientIndex + 1}`);
  return getCurrentClient();
}

// =============== ÂêàÁ∫¶ ABI ===============
const UNISWAP_V3_POOL_ABI = parseAbi([
  "event Burn(address indexed owner, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount, uint256 amount0, uint256 amount1)",
  "event Collect(address indexed owner, address recipient, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount0, uint128 amount1)",
  "event Mint(address indexed owner, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount, uint256 amount0, uint256 amount1)",
  "event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick)",
]);

const POSITION_MANAGER_ABI = parseAbi([
  "event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1)",
  "event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1)",
  "event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1)",
  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
]);

const ERC20_ABI = parseAbi([
  "function symbol() view returns (string)",
  "function decimals() view returns (uint8)",
]);

const POOL_ABI = parseAbi([
  "function token0() view returns (address)",
  "function token1() view returns (address)",
]);

// =============== ÈôêÊµÅÂíåÁºìÂ≠ò ===============
const limiter = new Bottleneck({
  maxConcurrent: 1,
  minTime: 2000,
  reservoir: 1,
  reservoirRefreshAmount: 1,
  reservoirRefreshInterval: 2000,
});

const tokenCache = new Map();

// =============== Ê†∏ÂøÉÂáΩÊï∞ ===============
async function withRetry(fn, maxRetries = 3, initialDelay = 5000) {
  let retries = 0;
  let delay = initialDelay;

  while (true) {
    try {
      return await fn();
    } catch (error) {
      if (retries >= maxRetries) {
        throw error;
      }

      if (error.cause?.status === 429) {
        console.log(
          `‚è≥ ÈÅáÂà∞È¢ëÁéáÈôêÂà∂ÔºåÁ≠âÂæÖ ${delay / 1000} ÁßíÂêéÈáçËØï... (${
            retries + 1
          }/${maxRetries})`
        );
        await new Promise((resolve) => setTimeout(resolve, delay));
        delay *= 2;
        retries++;
        switchClient();
        continue;
      }

      throw error;
    }
  }
}

async function getTokenInfo(address) {
  if (tokenCache.has(address)) {
    console.log(`üì¶ ‰ΩøÁî®ÁºìÂ≠òÁöÑ‰ª£Â∏Å‰ø°ÊÅØ: ${address}`);
    return tokenCache.get(address);
  }

  try {
    const [symbol, decimals] = await Promise.all([
      limiter.schedule(() =>
        withRetry(() =>
          getCurrentClient().readContract({
            address,
            abi: ERC20_ABI,
            functionName: "symbol",
          })
        )
      ),
      limiter.schedule(() =>
        withRetry(() =>
          getCurrentClient().readContract({
            address,
            abi: ERC20_ABI,
            functionName: "decimals",
          })
        )
      ),
    ]);

    const tokenInfo = { address, symbol, decimals };
    tokenCache.set(address, tokenInfo);
    return tokenInfo;
  } catch (error) {
    console.error(`‚ùå Ëé∑Âèñ‰ª£Â∏Å‰ø°ÊÅØÂ§±Ë¥•: ${address}`, error);
    return null;
  }
}

// =============== ‰∏ªÂáΩÊï∞ ===============
async function analyzeTransaction(txHash) {
  console.log(`\nüìù ÂºÄÂßãÂàÜÊûê‰∫§Êòì: ${txHash}`);
  const receipt = await withRetry(() =>
    getCurrentClient().getTransactionReceipt({ hash: txHash })
  );
  console.log(`‚úÖ ‰∫§ÊòìÊî∂ÊçÆËé∑ÂèñÊàêÂäüÔºåÂå∫ÂùóÂè∑: ${receipt.blockNumber}`);

  let poolAddress = null;
  let token0 = null;
  let token1 = null;
  let events = {
    pool: [],
    position: [],
  };

  // ÂÆö‰πâ‰∫ã‰ª∂ÁöÑ topic hash
  const POOL_EVENT_TOPICS = [
    "0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c", // Burn
    "0x70935338e69775456a85ddef226c395fb668b63fa0115f5f20610b388e6ca9c0", // Collect
    "0x7a53080ba414158be7ec69b987b5fb7d07dee101fe85488f0853ae16239d0bde", // Mint
    "0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67", // Swap
  ];

  const POSITION_EVENT_TOPICS = [
    "0x3067048beee31b25b2f1681f88dac838c8bba36af25bfb2b7cf7473a5847e35f", // IncreaseLiquidity
    "0x26f6a048ee9138f2c0ce266f322cb99228e8d619ae2bff30c67f8dcf9d2377b4", // DecreaseLiquidity
    "0x40d0efd1a53d60ecbf40971b9daf7dc90178c3aadc7aab1765632738fa8b8f01", // Collect
    "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef", // Transfer
  ];

  // Â§ÑÁêÜÊâÄÊúâÊó•Âøó
  for (const log of receipt.logs) {
    try {
      if (POOL_EVENT_TOPICS.includes(log.topics[0])) {
        const parsed = decodeEventLog({
          abi: UNISWAP_V3_POOL_ABI,
          data: log.data,
          topics: log.topics,
        });
        events.pool.push({ log, parsed });

        if (!poolAddress) {
          poolAddress = log.address;
          console.log(`\nüìç ÂàÜÊûêÊ±†Â≠ê: ${poolAddress}`);

          const [token0Address, token1Address] = await Promise.all([
            withRetry(() =>
              getCurrentClient().readContract({
                abi: POOL_ABI,
                address: poolAddress,
                functionName: "token0",
              })
            ),
            withRetry(() =>
              getCurrentClient().readContract({
                abi: POOL_ABI,
                address: poolAddress,
                functionName: "token1",
              })
            ),
          ]);

          token0 = await getTokenInfo(token0Address);
          token1 = await getTokenInfo(token1Address);

          if (token0 && token1) {
            console.log(`üìä ${token0.symbol}/${token1.symbol} Ê±†Â≠ê`);
          }
        }
      } else if (POSITION_EVENT_TOPICS.includes(log.topics[0])) {
        const parsed = decodeEventLog({
          abi: POSITION_MANAGER_ABI,
          data: log.data,
          topics: log.topics,
        });
        events.position.push({ log, parsed });
      }
    } catch (err) {
      continue;
    }
  }

  // Â§ÑÁêÜÊâÄÊúâ‰∫ã‰ª∂
  if (token0 && token1) {
    const eventCounts = {
      pool: {
        Burn: 0,
        Collect: 0,
        Mint: 0,
        Swap: 0,
      },
      position: {
        IncreaseLiquidity: 0,
        DecreaseLiquidity: 0,
        Collect: 0,
        Transfer: 0,
      },
    };

    // Â§ÑÁêÜ Pool ‰∫ã‰ª∂
    for (const { parsed } of events.pool) {
      eventCounts.pool[parsed.eventName]++;

      const format = (val, decimals) => {
        const num = Number(val) / 10 ** decimals;
        if (num > 1e9) return "ÂºÇÂ∏∏Êï∞ÂÄº";
        return num.toFixed(6);
      };

      switch (parsed.eventName) {
        case "Burn":
          console.log(`\nüî• Pool Burn #${eventCounts.pool.Burn}:`);
          console.log(`  owner: ${parsed.args.owner}`);
          console.log(`  tickLower: ${parsed.args.tickLower}`);
          console.log(`  tickUpper: ${parsed.args.tickUpper}`);
          console.log(`  amount: ${parsed.args.amount.toString()}`);
          console.log(
            `  amount0: ${format(parsed.args.amount0, token0.decimals)} ${
              token0.symbol
            }`
          );
          console.log(
            `  amount1: ${format(parsed.args.amount1, token1.decimals)} ${
              token1.symbol
            }`
          );
          break;

        case "Collect":
          console.log(`\nüí∞ Pool Collect #${eventCounts.pool.Collect}:`);
          console.log(`  owner: ${parsed.args.owner}`);
          console.log(`  recipient: ${parsed.args.recipient}`);
          console.log(`  tickLower: ${parsed.args.tickLower}`);
          console.log(`  tickUpper: ${parsed.args.tickUpper}`);
          console.log(
            `  amount0: ${format(parsed.args.amount0, token0.decimals)} ${
              token0.symbol
            }`
          );
          console.log(
            `  amount1: ${format(parsed.args.amount1, token1.decimals)} ${
              token1.symbol
            }`
          );
          break;

        case "Mint":
          console.log(`\n‚ûï Pool Mint #${eventCounts.pool.Mint}:`);
          console.log(`  owner: ${parsed.args.owner}`);
          console.log(`  tickLower: ${parsed.args.tickLower}`);
          console.log(`  tickUpper: ${parsed.args.tickUpper}`);
          console.log(`  amount: ${parsed.args.amount.toString()}`);
          console.log(
            `  amount0: ${format(parsed.args.amount0, token0.decimals)} ${
              token0.symbol
            }`
          );
          console.log(
            `  amount1: ${format(parsed.args.amount1, token1.decimals)} ${
              token1.symbol
            }`
          );
          break;

        case "Swap":
          console.log(`\nüîÅ Pool Swap #${eventCounts.pool.Swap}:`);
          const amount0Formatted = formatAmount(
            parsed.args.amount0,
            token0.decimals,
            token0.symbol
          );
          const amount1Formatted = formatAmount(
            parsed.args.amount1,
            token1.decimals,
            token1.symbol
          );

          if (amount0Formatted.isAbnormal || amount1Formatted.isAbnormal) {
            console.log("  ‚ö†Ô∏è ÂºÇÂ∏∏‰∫§ÊòìÈáëÈ¢ù:");
            console.log(
              `    amount0: ${amount0Formatted.raw} (${amount0Formatted.value} ${token0.symbol})`
            );
            console.log(
              `    amount1: ${amount1Formatted.raw} (${amount1Formatted.value} ${token1.symbol})`
            );
            console.log(
              `    ÂΩìÂâç‰ª∑Ê†º: ${Number(parsed.args.sqrtPriceX96) / 2 ** 96}`
            );
            console.log(`    ÊµÅÂä®ÊÄß: ${parsed.args.liquidity.toString()}`);
            console.log(`    ÂΩìÂâç tick: ${parsed.args.tick}`);
          } else {
            const amount0 = Number(parsed.args.amount0) / 10 ** token0.decimals;
            const amount1 = Number(parsed.args.amount1) / 10 ** token1.decimals;
            if (amount0 < 0) {
              console.log(
                `  Áî® ${Math.abs(amount0).toFixed(6)} ${
                  token0.symbol
                } Êç¢Âèñ ${amount1.toFixed(6)} ${token1.symbol}`
              );
            } else {
              console.log(
                `  Áî® ${Math.abs(amount1).toFixed(6)} ${
                  token1.symbol
                } Êç¢Âèñ ${amount0.toFixed(6)} ${token0.symbol}`
              );
            }
          }
          break;
      }
    }

    // Â§ÑÁêÜ Position ‰∫ã‰ª∂
    for (const { parsed } of events.position) {
      eventCounts.position[parsed.eventName]++;

      const format = (val, decimals) => {
        const num = Number(val) / 10 ** decimals;
        if (num > 1e9) return "ÂºÇÂ∏∏Êï∞ÂÄº";
        return num.toFixed(6);
      };

      switch (parsed.eventName) {
        case "IncreaseLiquidity":
          console.log(
            `\nüìà Position IncreaseLiquidity #${eventCounts.position.IncreaseLiquidity}:`
          );
          console.log(`  tokenId: ${parsed.args.tokenId}`);
          console.log(`  liquidity: ${parsed.args.liquidity.toString()}`);
          console.log(
            `  amount0: ${format(parsed.args.amount0, token0.decimals)} ${
              token0.symbol
            }`
          );
          console.log(
            `  amount1: ${format(parsed.args.amount1, token1.decimals)} ${
              token1.symbol
            }`
          );
          break;

        case "DecreaseLiquidity":
          console.log(
            `\nüìâ Position DecreaseLiquidity #${eventCounts.position.DecreaseLiquidity}:`
          );
          console.log(`  tokenId: ${parsed.args.tokenId}`);
          console.log(`  liquidity: ${parsed.args.liquidity.toString()}`);
          console.log(
            `  amount0: ${format(parsed.args.amount0, token0.decimals)} ${
              token0.symbol
            }`
          );
          console.log(
            `  amount1: ${format(parsed.args.amount1, token1.decimals)} ${
              token1.symbol
            }`
          );
          break;

        case "Collect":
          console.log(
            `\nüí∞ Position Collect #${eventCounts.position.Collect}:`
          );
          console.log(`  tokenId: ${parsed.args.tokenId}`);
          console.log(`  recipient: ${parsed.args.recipient}`);
          console.log(
            `  amount0: ${format(parsed.args.amount0, token0.decimals)} ${
              token0.symbol
            }`
          );
          console.log(
            `  amount1: ${format(parsed.args.amount1, token1.decimals)} ${
              token1.symbol
            }`
          );
          break;

        case "Transfer":
          console.log(
            `\nüì§ Position Transfer #${eventCounts.position.Transfer}:`
          );
          console.log(`  tokenId: ${parsed.args.tokenId}`);
          console.log(`  from: ${parsed.args.from}`);
          console.log(`  to: ${parsed.args.to}`);
          break;
      }
    }

    console.log("\nüìä ‰∫ã‰ª∂ÁªüËÆ°:");
    console.log("Pool ‰∫ã‰ª∂:");
    Object.entries(eventCounts.pool).forEach(([event, count]) => {
      if (count > 0) {
        console.log(`  ${event}: ${count} ‰∏™`);
      }
    });
    console.log("Position ‰∫ã‰ª∂:");
    Object.entries(eventCounts.position).forEach(([event, count]) => {
      if (count > 0) {
        console.log(`  ${event}: ${count} ‰∏™`);
      }
    });
  } else {
    console.error("‚ùå Êó†Ê≥ïËé∑Âèñ‰ª£Â∏Å‰ø°ÊÅØÔºåË∑≥Ëøá‰∫ã‰ª∂ÂàÜÊûê");
  }

  console.log("\n‚ú® ‰∫§ÊòìÂàÜÊûêÂÆåÊàê!");
}

// =============== ÊâßË°å ===============
const TX_HASH =
  "0xdcafedbc4517fed5409046081fb47fa3c30139e358585bddb8c86900a7f2ab99";

console.log("üì° ËøûÊé•Âà∞ Base ÁΩëÁªú...");
analyzeTransaction(TX_HASH).then(() => {
  analyzeAbnormalSwap(TX_HASH);
});

// Ê∑ªÂä†Êñ∞ÁöÑÊ†ºÂºèÂåñÂáΩÊï∞
const formatAmount = (amount, decimals, symbol) => {
  const num = Number(amount) / 10 ** decimals;
  if (num > 1e9) {
    return {
      value: "ÂºÇÂ∏∏Êï∞ÂÄº",
      raw: amount.toString(),
      isAbnormal: true,
    };
  }
  return {
    value: num.toFixed(6),
    raw: amount.toString(),
    isAbnormal: false,
  };
};

// Âú®Êñá‰ª∂Êú´Â∞æÊ∑ªÂä†Êñ∞ÁöÑÂàÜÊûêÂáΩÊï∞
async function analyzeAbnormalSwap(txHash) {
  console.log("\nüîç ÂàÜÊûêÂºÇÂ∏∏‰∫§Êòì...");
  const receipt = await withRetry(() =>
    getCurrentClient().getTransactionReceipt({ hash: txHash })
  );

  // Ëé∑Âèñ‰∫§ÊòìËØ¶ÊÉÖ
  const tx = await withRetry(() =>
    getCurrentClient().getTransaction({ hash: txHash })
  );

  console.log("\nüìä ‰∫§ÊòìËØ¶ÊÉÖ:");
  console.log(`  ÂèëÈÄÅÊñπ: ${tx.from}`);
  console.log(`  Êé•Êî∂Êñπ: ${tx.to}`);
  console.log(`  Gas ‰ª∑Ê†º: ${tx.gasPrice}`);
  console.log(`  Gas ÈôêÂà∂: ${tx.gas}`);
  console.log(`  ‰∫§ÊòìÂÄº: ${tx.value}`);

  // ÂàÜÊûêÊâÄÊúâ Swap ‰∫ã‰ª∂
  let swapCount = 0;
  for (const log of receipt.logs) {
    if (
      log.topics[0] ===
      "0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67"
    ) {
      swapCount++;
      try {
        const parsed = decodeEventLog({
          abi: UNISWAP_V3_POOL_ABI,
          data: log.data,
          topics: log.topics,
        });

        console.log(`\nüîÑ Swap #${swapCount}:`);
        console.log(`  Ê±†Â≠êÂú∞ÂùÄ: ${log.address}`);
        console.log(`  amount0: ${parsed.args.amount0.toString()}`);
        console.log(`  amount1: ${parsed.args.amount1.toString()}`);
        console.log(`  ‰ª∑Ê†º: ${Number(parsed.args.sqrtPriceX96) / 2 ** 96}`);
        console.log(`  ÊµÅÂä®ÊÄß: ${parsed.args.liquidity.toString()}`);
        console.log(`  tick: ${parsed.args.tick}`);
      } catch (err) {
        console.log(`  Ëß£ÊûêÂ§±Ë¥•: ${err.message}`);
      }
    }
  }
}
