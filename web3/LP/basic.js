// ‰ΩøÁî® viem Êõø‰ª£ ethers.js ÂÆûÁé∞ uniswap rebalance ‰∫§ÊòìÂàÜÊûê
import { createPublicClient, http, parseAbi, decodeEventLog } from "viem";
import { base } from "viem/chains";
import Bottleneck from "bottleneck";

// =============== ÈÖçÁΩÆ ===============
console.log("üöÄ ÂàùÂßãÂåñÂÆ¢Êà∑Á´Ø...");

// Ê∑ªÂä†Êõ¥Â§ö RPC ËäÇÁÇπ
const RPC_URLS = [
  process.env.RPC_URL,
  "https://mainnet.base.org",
  "https://base.blockpi.network/v1/rpc/public",
  "https://base.meowrpc.com",
  "https://base.publicnode.com",
  "https://base-rpc.publicnode.com",
];

// ‰ºòÂåñ RPC ÂÆ¢Êà∑Á´ØÁÆ°ÁêÜ
let currentClientIndex = 0;
const clients = RPC_URLS.map((url) =>
  createPublicClient({
    transport: http(url),
    chain: base,
  })
);

const getCurrentClient = () => {
  return clients[currentClientIndex];
};

const switchClient = () => {
  currentClientIndex = (currentClientIndex + 1) % clients.length;
  console.log(`üîÑ ÂàáÊç¢Âà∞ RPC ËäÇÁÇπ ${currentClientIndex + 1}`);
  return getCurrentClient();
};

// =============== Â∑•ÂÖ∑ÂáΩÊï∞ ===============

// =============== ÂêàÁ∫¶ ABI ===============
const UNISWAP_V3_POOL_ABI = parseAbi([
  "event Burn(address indexed owner, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount, uint256 amount0, uint256 amount1)",
  "event Collect(address indexed owner, address recipient, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount0, uint128 amount1)",
  "event Mint(address indexed owner, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount, uint256 amount0, uint256 amount1)",
  "event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick)",
]);

const POSITION_MANAGER_ABI = parseAbi([
  "event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1)",
  "event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1)",
  "event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1)",
  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
]);

const ERC20_ABI = parseAbi([
  "function symbol() view returns (string)",
  "function decimals() view returns (uint8)",
]);

const POOL_ABI = parseAbi([
  "function token0() view returns (address)",
  "function token1() view returns (address)",
]);

// Ê∑ªÂä† Uniswap V2 Âíå V4 ÁöÑ ABI
const UNISWAP_V2_PAIR_ABI = parseAbi([
  "event Swap(address indexed sender, uint256 amount0In, uint256 amount0Out, uint256 amount1In, uint256 amount1Out, address indexed to)",
]);

const UNISWAP_V4_POOL_ABI = parseAbi([
  "event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick, uint24 fee)",
]);

// =============== ÈôêÊµÅÂíåÁºìÂ≠ò ===============
const limiter = new Bottleneck({
  maxConcurrent: 2,
  minTime: 1000,
  reservoir: 2,
  reservoirRefreshAmount: 2,
  reservoirRefreshInterval: 1000,
});

const tokenCache = new Map();
const poolCache = new Map();

// Ê∑ªÂä†Â∑≤Áü•ÁöÑÊ±†Â≠ê‰ø°ÊÅØ
const KNOWN_POOLS = {
  "0xec558e484cc9f2210714e345298fdc53b253c27d": {
    token0: {
      address: "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913",
      symbol: "USDC",
      decimals: 6,
    },
    token1: {
      address: "0xcbB7C0000aB88B473b1f5aFd9ef808440eed33Bf",
      symbol: "cbBTC",
      decimals: 8,
    },
  },
  "0xd92e0767473d1e3ff11ac036f2b1db90ad0ae55f": {
    token0: {
      address: "0x4200000000000000000000000000000000000006",
      symbol: "WETH",
      decimals: 18,
    },
    token1: {
      address: "0xfde4C96c8593536E31F229EA8f37b2ADa2699bb2",
      symbol: "USDT",
      decimals: 6,
    },
  },
};

// =============== Ê†∏ÂøÉÂáΩÊï∞ ===============
const withRetry = async (fn, maxRetries = 5, initialDelay = 2000) => {
  let retries = 0;
  let delay = initialDelay;
  let lastError = null;

  while (true) {
    try {
      return await fn();
    } catch (error) {
      lastError = error;

      if (retries >= maxRetries) {
        console.error(
          `‚ùå ËææÂà∞ÊúÄÂ§ßÈáçËØïÊ¨°Êï∞ (${maxRetries})ÔºåÊúÄÂêé‰∏ÄÊ¨°ÈîôËØØ:`,
          error.message
        );
        throw error;
      }

      // Ê£ÄÊü•ÊòØÂê¶ÊòØ rate limit ÊàñÈÖçÈ¢ùÈôêÂà∂ÈîôËØØ
      if (
        error.message?.includes("rate limit") ||
        error.details?.includes("rate limit") ||
        error.message?.includes("quota") ||
        error.details?.includes("quota") ||
        error.message?.includes("resource not found") ||
        error.details?.includes("resource not found")
      ) {
        console.log(`‚ö†Ô∏è RPC ËäÇÁÇπÈôêÂà∂ÔºåÁ≠âÂæÖ ${delay}ms ÂêéÈáçËØï...`);
        await new Promise((resolve) => setTimeout(resolve, delay));
        delay = Math.min(delay * 1.5, 10000); // ÊúÄÂ§ßÂª∂Ëøü 10 Áßí
        retries++;
        switchClient();
        continue;
      }

      throw error;
    }
  }
};

async function getTokenInfo(address) {
  if (tokenCache.has(address)) {
    console.log(`üì¶ ‰ΩøÁî®ÁºìÂ≠òÁöÑ‰ª£Â∏Å‰ø°ÊÅØ: ${address}`);
    return tokenCache.get(address);
  }

  try {
    const [symbol, decimals] = await Promise.all([
      limiter.schedule(() =>
        withRetry(() =>
          getCurrentClient().readContract({
            address,
            abi: ERC20_ABI,
            functionName: "symbol",
          })
        )
      ),
      limiter.schedule(() =>
        withRetry(() =>
          getCurrentClient().readContract({
            address,
            abi: ERC20_ABI,
            functionName: "decimals",
          })
        )
      ),
    ]);

    const tokenInfo = { address, symbol, decimals };
    tokenCache.set(address, tokenInfo);
    return tokenInfo;
  } catch (error) {
    console.error(`‚ùå Ëé∑Âèñ‰ª£Â∏Å‰ø°ÊÅØÂ§±Ë¥•: ${address}`, error);
    return null;
  }
}

// =============== ‰∏ªÂáΩÊï∞ ===============
async function analyzeTransaction(txHash) {
  console.log("üöÄ ÂàùÂßãÂåñÂÆ¢Êà∑Á´Ø...");
  console.log("üì° ËøûÊé•Âà∞ Base ÁΩëÁªú...");

  // Âú®ÂºÄÂßãÂàÜÊûê‰∫§Êòì‰πãÂâçÈ™åËØÅÂ∑≤Áü•Ê±†Â≠ê
  await validateKnownPools();

  console.log(`\nüìù ÂºÄÂßãÂàÜÊûê‰∫§Êòì: ${txHash}`);
  const receipt = await withRetry(() =>
    getCurrentClient().getTransactionReceipt({ hash: txHash })
  );
  console.log(`‚úÖ ‰∫§ÊòìÊî∂ÊçÆËé∑ÂèñÊàêÂäüÔºåÂå∫ÂùóÂè∑: ${receipt.blockNumber}`);

  let poolAddress = null;
  let token0 = null;
  let token1 = null;
  let events = {
    pool: [],
    position: [],
  };

  // ÂÆö‰πâ‰∫ã‰ª∂ÁöÑ topic hash
  const POOL_EVENT_TOPICS = [
    "0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c", // V3 Burn
    "0x70935338e69775456a85ddef226c395fb668b63fa0115f5f20610b388e6ca9c0", // V3 Collect
    "0x7a53080ba414158be7ec69b987b5fb7d07dee101fe85488f0853ae16239d0bde", // V3 Mint
    "0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67", // V3 Swap
    "0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822", // V2 Swap
    "0x19b47279256b2a23a1665c810c8d55a1758950e09377acb841d0a21f2e2f0f3d", // V4 Swap
  ];

  const POSITION_EVENT_TOPICS = [
    "0x3067048beee31b25b2f1681f88dac838c8bba36af25bfb2b7cf7473a5847e35f", // IncreaseLiquidity
    "0x26f6a048ee9138f2c0ce266f322cb99228e8d619ae2bff30c67f8dcf9d2377b4", // DecreaseLiquidity
    "0x40d0efd1a53d60ecbf40971b9daf7dc90178c3aadc7aab1765632738fa8b8f01", // Collect
    "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef", // Transfer
  ];

  // Â§ÑÁêÜÊâÄÊúâÊó•Âøó
  for (const log of receipt.logs) {
    try {
      if (POOL_EVENT_TOPICS.includes(log.topics[0])) {
        let parsed;
        let version;

        // Ê†πÊçÆ topic Á°ÆÂÆöÁâàÊú¨ÂíåËß£ÊûêÊñπÂºè
        if (
          log.topics[0] ===
          "0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822"
        ) {
          // V2 Swap
          parsed = decodeEventLog({
            abi: UNISWAP_V2_PAIR_ABI,
            data: log.data,
            topics: log.topics,
          });
          version = "V2";
        } else if (
          log.topics[0] ===
          "0x19b47279256b2a23a1665c810c8d55a1758950e09377acb841d0a21f2e2f0f3d"
        ) {
          // V4 Swap
          parsed = decodeEventLog({
            abi: UNISWAP_V4_POOL_ABI,
            data: log.data,
            topics: log.topics,
          });
          version = "V4";
        } else {
          // V3 ‰∫ã‰ª∂
          parsed = decodeEventLog({
            abi: UNISWAP_V3_POOL_ABI,
            data: log.data,
            topics: log.topics,
          });
          version = "V3";
        }

        events.pool.push({ log, parsed, version });

        if (!poolAddress) {
          poolAddress = log.address;
          console.log(`\nüìç ÂàÜÊûêÊ±†Â≠ê: ${poolAddress}`);

          const [token0Address, token1Address] = await Promise.all([
            withRetry(() =>
              getCurrentClient().readContract({
                abi: POOL_ABI,
                address: poolAddress,
                functionName: "token0",
              })
            ),
            withRetry(() =>
              getCurrentClient().readContract({
                abi: POOL_ABI,
                address: poolAddress,
                functionName: "token1",
              })
            ),
          ]);

          token0 = await getTokenInfo(token0Address);
          token1 = await getTokenInfo(token1Address);

          if (token0 && token1) {
            console.log(`üìä ${token0.symbol}/${token1.symbol} Ê±†Â≠ê`);
          }
        }
      } else if (POSITION_EVENT_TOPICS.includes(log.topics[0])) {
        const parsed = decodeEventLog({
          abi: POSITION_MANAGER_ABI,
          data: log.data,
          topics: log.topics,
        });
        events.position.push({ log, parsed });
      }
    } catch (err) {
      continue;
    }
  }

  // Â§ÑÁêÜÊâÄÊúâ‰∫ã‰ª∂
  if (token0 && token1) {
    const eventCounts = {
      pool: {
        Burn: 0,
        Collect: 0,
        Mint: 0,
        Swap: 0,
      },
      position: {
        IncreaseLiquidity: 0,
        DecreaseLiquidity: 0,
        Collect: 0,
        Transfer: 0,
      },
    };

    // Â§ÑÁêÜ Pool ‰∫ã‰ª∂
    for (const { parsed, version } of events.pool) {
      eventCounts.pool[parsed.eventName]++;

      const format = (val, decimals) => {
        const num = Number(val) / 10 ** decimals;
        if (num > 1e9) return "ÂºÇÂ∏∏Êï∞ÂÄº";
        return num.toFixed(6);
      };

      switch (parsed.eventName) {
        case "Burn":
          console.log(`\nüî• Pool Burn #${eventCounts.pool.Burn}:`);
          console.log(`  owner: ${parsed.args.owner}`);
          console.log(`  tickLower: ${parsed.args.tickLower}`);
          console.log(`  tickUpper: ${parsed.args.tickUpper}`);
          console.log(`  amount: ${parsed.args.amount.toString()}`);
          console.log(
            `  amount0: ${format(parsed.args.amount0, token0.decimals)} ${
              token0.symbol
            }`
          );
          console.log(
            `  amount1: ${format(parsed.args.amount1, token1.decimals)} ${
              token1.symbol
            }`
          );
          break;

        case "Collect":
          console.log(`\nüí∞ Pool Collect #${eventCounts.pool.Collect}:`);
          console.log(`  owner: ${parsed.args.owner}`);
          console.log(`  recipient: ${parsed.args.recipient}`);
          console.log(`  tickLower: ${parsed.args.tickLower}`);
          console.log(`  tickUpper: ${parsed.args.tickUpper}`);
          console.log(
            `  amount0: ${format(parsed.args.amount0, token0.decimals)} ${
              token0.symbol
            }`
          );
          console.log(
            `  amount1: ${format(parsed.args.amount1, token1.decimals)} ${
              token1.symbol
            }`
          );
          break;

        case "Mint":
          console.log(`\n‚ûï Pool Mint #${eventCounts.pool.Mint}:`);
          console.log(`  owner: ${parsed.args.owner}`);
          console.log(`  tickLower: ${parsed.args.tickLower}`);
          console.log(`  tickUpper: ${parsed.args.tickUpper}`);
          console.log(`  amount: ${parsed.args.amount.toString()}`);
          console.log(
            `  amount0: ${format(parsed.args.amount0, token0.decimals)} ${
              token0.symbol
            }`
          );
          console.log(
            `  amount1: ${format(parsed.args.amount1, token1.decimals)} ${
              token1.symbol
            }`
          );
          break;

        case "Swap":
          console.log(`\nüîÅ ${version} Pool Swap #${eventCounts.pool.Swap}:`);

          if (version === "V2") {
            const amount0In =
              Number(parsed.args.amount0In) / 10 ** token0.decimals;
            const amount0Out =
              Number(parsed.args.amount0Out) / 10 ** token0.decimals;
            const amount1In =
              Number(parsed.args.amount1In) / 10 ** token1.decimals;
            const amount1Out =
              Number(parsed.args.amount1Out) / 10 ** token1.decimals;

            if (amount0In > 0) {
              console.log(
                `  Áî® ${amount0In.toFixed(6)} ${
                  token0.symbol
                } Êç¢Âèñ ${amount1Out.toFixed(6)} ${token1.symbol}`
              );
            } else {
              console.log(
                `  Áî® ${amount1In.toFixed(6)} ${
                  token1.symbol
                } Êç¢Âèñ ${amount0Out.toFixed(6)} ${token0.symbol}`
              );
            }
          } else {
            const amount0Formatted = formatAmount(
              parsed.args.amount0,
              token0.decimals,
              token0.symbol
            );
            const amount1Formatted = formatAmount(
              parsed.args.amount1,
              token1.decimals,
              token1.symbol
            );

            if (amount0Formatted.isAbnormal || amount1Formatted.isAbnormal) {
              console.log("  ‚ö†Ô∏è ÂºÇÂ∏∏‰∫§ÊòìÈáëÈ¢ù:");
              console.log(
                `    amount0: ${amount0Formatted.raw} (${amount0Formatted.value} ${token0.symbol})`
              );
              console.log(
                `    amount1: ${amount1Formatted.raw} (${amount1Formatted.value} ${token1.symbol})`
              );
              console.log(
                `    ÂΩìÂâç‰ª∑Ê†º: ${Number(parsed.args.sqrtPriceX96) / 2 ** 96}`
              );
              console.log(`    ÊµÅÂä®ÊÄß: ${parsed.args.liquidity.toString()}`);
              console.log(`    ÂΩìÂâç tick: ${parsed.args.tick}`);
              if (version === "V4") {
                console.log(`    ÊâãÁª≠Ë¥π: ${parsed.args.fee / 10000}%`);
              }
            } else {
              const amount0 =
                Number(parsed.args.amount0) / 10 ** token0.decimals;
              const amount1 =
                Number(parsed.args.amount1) / 10 ** token1.decimals;
              if (amount0 < 0) {
                console.log(
                  `  Áî® ${Math.abs(amount0).toFixed(6)} ${
                    token0.symbol
                  } Êç¢Âèñ ${amount1.toFixed(6)} ${token1.symbol}`
                );
              } else {
                console.log(
                  `  Áî® ${Math.abs(amount1).toFixed(6)} ${
                    token1.symbol
                  } Êç¢Âèñ ${amount0.toFixed(6)} ${token0.symbol}`
                );
              }
            }
          }
          break;
      }
    }

    // Â§ÑÁêÜ Position ‰∫ã‰ª∂
    for (const { parsed } of events.position) {
      eventCounts.position[parsed.eventName]++;

      const format = (val, decimals) => {
        const num = Number(val) / 10 ** decimals;
        if (num > 1e9) return "ÂºÇÂ∏∏Êï∞ÂÄº";
        return num.toFixed(6);
      };

      switch (parsed.eventName) {
        case "IncreaseLiquidity":
          console.log(
            `\nüìà Position IncreaseLiquidity #${eventCounts.position.IncreaseLiquidity}:`
          );
          console.log(`  tokenId: ${parsed.args.tokenId}`);
          console.log(`  liquidity: ${parsed.args.liquidity.toString()}`);
          console.log(
            `  amount0: ${format(parsed.args.amount0, token0.decimals)} ${
              token0.symbol
            }`
          );
          console.log(
            `  amount1: ${format(parsed.args.amount1, token1.decimals)} ${
              token1.symbol
            }`
          );
          break;

        case "DecreaseLiquidity":
          console.log(
            `\nüìâ Position DecreaseLiquidity #${eventCounts.position.DecreaseLiquidity}:`
          );
          console.log(`  tokenId: ${parsed.args.tokenId}`);
          console.log(`  liquidity: ${parsed.args.liquidity.toString()}`);
          console.log(
            `  amount0: ${format(parsed.args.amount0, token0.decimals)} ${
              token0.symbol
            }`
          );
          console.log(
            `  amount1: ${format(parsed.args.amount1, token1.decimals)} ${
              token1.symbol
            }`
          );
          break;

        case "Collect":
          console.log(
            `\nüí∞ Position Collect #${eventCounts.position.Collect}:`
          );
          console.log(`  tokenId: ${parsed.args.tokenId}`);
          console.log(`  recipient: ${parsed.args.recipient}`);
          console.log(
            `  amount0: ${format(parsed.args.amount0, token0.decimals)} ${
              token0.symbol
            }`
          );
          console.log(
            `  amount1: ${format(parsed.args.amount1, token1.decimals)} ${
              token1.symbol
            }`
          );
          break;

        case "Transfer":
          console.log(
            `\nüì§ Position Transfer #${eventCounts.position.Transfer}:`
          );
          console.log(`  tokenId: ${parsed.args.tokenId}`);
          console.log(`  from: ${parsed.args.from}`);
          console.log(`  to: ${parsed.args.to}`);
          break;
      }
    }

    console.log("\nüìä ‰∫ã‰ª∂ÁªüËÆ°:");
    console.log("Pool ‰∫ã‰ª∂:");
    Object.entries(eventCounts.pool).forEach(([event, count]) => {
      if (count > 0) {
        console.log(`  ${event}: ${count} ‰∏™`);
      }
    });
    console.log("Position ‰∫ã‰ª∂:");
    Object.entries(eventCounts.position).forEach(([event, count]) => {
      if (count > 0) {
        console.log(`  ${event}: ${count} ‰∏™`);
      }
    });
  } else {
    console.error("‚ùå Êó†Ê≥ïËé∑Âèñ‰ª£Â∏Å‰ø°ÊÅØÔºåË∑≥Ëøá‰∫ã‰ª∂ÂàÜÊûê");
  }

  console.log("\n‚ú® ‰∫§ÊòìÂàÜÊûêÂÆåÊàê!");
}

// =============== ÊâßË°å ===============
const TX_HASH =
  "0xdcafedbc4517fed5409046081fb47fa3c30139e358585bddb8c86900a7f2ab99";

console.log("üì° ËøûÊé•Âà∞ Base ÁΩëÁªú...");
analyzeTransaction(TX_HASH).then(() => {
  analyzeAbnormalSwap(TX_HASH);
});

// Ê∑ªÂä†Êñ∞ÁöÑÊ†ºÂºèÂåñÂáΩÊï∞
const formatAmount = (amount, decimals, symbol) => {
  const num = Number(amount) / 10 ** decimals;
  if (num > 1e9) {
    return {
      value: "ÂºÇÂ∏∏Êï∞ÂÄº",
      raw: amount.toString(),
      isAbnormal: true,
    };
  }
  return {
    value: num.toFixed(6),
    raw: amount.toString(),
    isAbnormal: false,
  };
};

// Ê∑ªÂä†Ê±†Â≠êÈ™åËØÅÂáΩÊï∞
async function validatePoolInfo(poolAddress, token0Address, token1Address) {
  try {
    const [actualToken0, actualToken1] = await Promise.all([
      getCurrentClient().readContract({
        abi: POOL_ABI,
        address: poolAddress,
        functionName: "token0",
      }),
      getCurrentClient().readContract({
        abi: POOL_ABI,
        address: poolAddress,
        functionName: "token1",
      }),
    ]);

    if (
      actualToken0.toLowerCase() !== token0Address.toLowerCase() ||
      actualToken1.toLowerCase() !== token1Address.toLowerCase()
    ) {
      console.warn(`‚ö†Ô∏è Ê±†Â≠ê ${poolAddress} ÁöÑ‰ª£Â∏Å‰ø°ÊÅØ‰∏çÂåπÈÖçÔºÅ`);
      console.warn(`  È¢ÑÊúü: ${token0Address}/${token1Address}`);
      console.warn(`  ÂÆûÈôÖ: ${actualToken0}/${actualToken1}`);
      return false;
    }
    return true;
  } catch (error) {
    console.error(`‚ùå È™åËØÅÊ±†Â≠ê‰ø°ÊÅØÂ§±Ë¥•: ${poolAddress}`, error);
    return false;
  }
}

// È™åËØÅÊâÄÊúâÂ∑≤Áü•Ê±†Â≠ê
async function validateKnownPools() {
  console.log("\nüîç È™åËØÅÂ∑≤Áü•Ê±†Â≠ê‰ø°ÊÅØ...");
  for (const [address, info] of Object.entries(KNOWN_POOLS)) {
    console.log(`\nÈ™åËØÅÊ±†Â≠ê: ${address}`);
    console.log(`  È¢ÑÊúü‰ª£Â∏ÅÂØπ: ${info.token0.symbol}/${info.token1.symbol}`);
    const isValid = await validatePoolInfo(
      address,
      info.token0.address,
      info.token1.address
    );
    if (!isValid) {
      console.error(`‚ùå Ê±†Â≠ê ${address} È™åËØÅÂ§±Ë¥•ÔºåËØ∑Êõ¥Êñ∞‰ø°ÊÅØ`);
    } else {
      console.log(`‚úÖ Ê±†Â≠ê ${address} È™åËØÅÈÄöËøá`);
    }
  }
}

// ‰øÆÊîπ getPoolInfo ÂáΩÊï∞ÔºåÊ∑ªÂä†È™åËØÅ
async function getPoolInfo(poolAddress) {
  // È¶ñÂÖàÊ£ÄÊü•ÁºìÂ≠ò
  if (poolCache.has(poolAddress)) {
    console.log(`üì¶ ‰ΩøÁî®ÁºìÂ≠òÁöÑÊ±†Â≠ê‰ø°ÊÅØ: ${poolAddress}`);
    return poolCache.get(poolAddress);
  }

  // ÁÑ∂ÂêéÊ£ÄÊü•Â∑≤Áü•Ê±†Â≠ê
  if (KNOWN_POOLS[poolAddress]) {
    console.log(`üì¶ ‰ΩøÁî®Â∑≤Áü•ÁöÑÊ±†Â≠ê‰ø°ÊÅØ: ${poolAddress}`);
    const poolInfo = KNOWN_POOLS[poolAddress];

    // È™åËØÅÊ±†Â≠ê‰ø°ÊÅØ
    try {
      const isValid = await validatePoolInfo(
        poolAddress,
        poolInfo.token0.address,
        poolInfo.token1.address
      );
      if (isValid) {
        poolCache.set(poolAddress, poolInfo);
        return poolInfo;
      }
      console.log("‚ö†Ô∏è Â∑≤Áü•Ê±†Â≠ê‰ø°ÊÅØÂèØËÉΩ‰∏çÂáÜÁ°ÆÔºåÂ∞ùËØï‰ªéÈìæ‰∏äËé∑ÂèñÊúÄÊñ∞‰ø°ÊÅØ");
    } catch (error) {
      console.log("‚ö†Ô∏è Ê±†Â≠êÈ™åËØÅÂ§±Ë¥•Ôºå‰ΩøÁî®Â∑≤Áü•‰ø°ÊÅØÁªßÁª≠");
      return poolInfo;
    }
  }

  // ÊúÄÂêéÂ∞ùËØï‰ªéÈìæ‰∏äËé∑Âèñ
  try {
    const [token0Address, token1Address] = await Promise.all([
      withRetry(() =>
        getCurrentClient().readContract({
          abi: POOL_ABI,
          address: poolAddress,
          functionName: "token0",
        })
      ),
      withRetry(() =>
        getCurrentClient().readContract({
          abi: POOL_ABI,
          address: poolAddress,
          functionName: "token1",
        })
      ),
    ]);

    // Â¶ÇÊûúËé∑ÂèñÂà∞‰ª£Â∏ÅÂú∞ÂùÄÔºåÂ∞ùËØïËé∑Âèñ‰ª£Â∏Å‰ø°ÊÅØ
    if (token0Address && token1Address) {
      try {
        const [token0Symbol, token0Decimals, token1Symbol, token1Decimals] =
          await Promise.all([
            withRetry(() =>
              getCurrentClient().readContract({
                abi: [
                  {
                    name: "symbol",
                    type: "function",
                    stateMutability: "view",
                    inputs: [],
                    outputs: [{ type: "string" }],
                  },
                ],
                address: token0Address,
                functionName: "symbol",
              })
            ),
            withRetry(() =>
              getCurrentClient().readContract({
                abi: [
                  {
                    name: "decimals",
                    type: "function",
                    stateMutability: "view",
                    inputs: [],
                    outputs: [{ type: "uint8" }],
                  },
                ],
                address: token0Address,
                functionName: "decimals",
              })
            ),
            withRetry(() =>
              getCurrentClient().readContract({
                abi: [
                  {
                    name: "symbol",
                    type: "function",
                    stateMutability: "view",
                    inputs: [],
                    outputs: [{ type: "string" }],
                  },
                ],
                address: token1Address,
                functionName: "symbol",
              })
            ),
            withRetry(() =>
              getCurrentClient().readContract({
                abi: [
                  {
                    name: "decimals",
                    type: "function",
                    stateMutability: "view",
                    inputs: [],
                    outputs: [{ type: "uint8" }],
                  },
                ],
                address: token1Address,
                functionName: "decimals",
              })
            ),
          ]);

        const poolInfo = {
          address: poolAddress,
          token0: {
            address: token0Address,
            symbol: token0Symbol,
            decimals: token0Decimals,
          },
          token1: {
            address: token1Address,
            symbol: token1Symbol,
            decimals: token1Decimals,
          },
        };

        poolCache.set(poolAddress, poolInfo);
        console.log(`  ‚úÖ ÊàêÂäüËé∑ÂèñÊ±†Â≠ê‰ø°ÊÅØ: ${token0Symbol}/${token1Symbol}`);
        return poolInfo;
      } catch (error) {
        console.error(`‚ùå Ëé∑Âèñ‰ª£Â∏Å‰ø°ÊÅØÂ§±Ë¥•: ${poolAddress}`, error);
        // Â¶ÇÊûúËé∑Âèñ‰ª£Â∏Å‰ø°ÊÅØÂ§±Ë¥•ÔºåËá≥Â∞ëËøîÂõû‰ª£Â∏ÅÂú∞ÂùÄ
        return {
          token0: { address: token0Address },
          token1: { address: token1Address },
        };
      }
    }
  } catch (error) {
    console.error(`‚ùå Ëé∑ÂèñÊ±†Â≠ê‰ø°ÊÅØÂ§±Ë¥•: ${poolAddress}`, error);
    return null;
  }
}

// ‰øÆÊîπ analyzeAbnormalSwap ÂáΩÊï∞
async function analyzeAbnormalSwap(txHash) {
  console.log("\nüîç ÂàÜÊûêË∑®Ê±†‰∫§Êòì...");
  const receipt = await withRetry(() =>
    getCurrentClient().getTransactionReceipt({ hash: txHash })
  );

  // Ëé∑Âèñ‰∫§ÊòìËØ¶ÊÉÖ
  const tx = await withRetry(() =>
    getCurrentClient().getTransaction({ hash: txHash })
  );

  console.log("\nüìä ‰∫§ÊòìËØ¶ÊÉÖ:");
  console.log(`  ÂèëÈÄÅÊñπ: ${tx.from}`);
  console.log(`  Êé•Êî∂Êñπ: ${tx.to}`);
  console.log(`  Gas ‰ª∑Ê†º: ${tx.gasPrice}`);
  console.log(`  Gas ÈôêÂà∂: ${tx.gas}`);
  console.log(`  ‰∫§ÊòìÂÄº: ${tx.value}`);

  // ÂàÜÊûêÊâÄÊúâ Swap ‰∫ã‰ª∂
  let swapCount = 0;
  let poolInfos = new Map();
  let swapEvents = [];

  console.log("\nüîç ÂºÄÂßãÊî∂ÈõÜ Swap ‰∫ã‰ª∂...");
  console.log(`  ÊÄªÊó•ÂøóÊï∞: ${receipt.logs.length}`);

  for (const log of receipt.logs) {
    // ËÆ∞ÂΩïÊâÄÊúâÂèØËÉΩÁöÑ Swap ‰∫ã‰ª∂ topic
    if (
      log.topics[0] ===
        "0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67" || // V3 Swap
      log.topics[0] ===
        "0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822" || // V2 Swap
      log.topics[0] ===
        "0x19b47279256b2a23a1665c810c8d55a1758950e09377acb841d0a21f2e2f0f3d"
    ) {
      // V4 Swap

      console.log(`\nüìù ÂèëÁé∞ Swap ‰∫ã‰ª∂ #${swapCount + 1}:`);
      console.log(`  Topic: ${log.topics[0]}`);
      console.log(`  ÂêàÁ∫¶Âú∞ÂùÄ: ${log.address}`);
      console.log(`  Êï∞ÊçÆÈïøÂ∫¶: ${log.data.length}`);

      swapCount++;
      try {
        let parsed;
        let version;

        if (
          log.topics[0] ===
          "0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822"
        ) {
          parsed = decodeEventLog({
            abi: UNISWAP_V2_PAIR_ABI,
            data: log.data,
            topics: log.topics,
          });
          version = "V2";
        } else if (
          log.topics[0] ===
          "0x19b47279256b2a23a1665c810c8d55a1758950e09377acb841d0a21f2e2f0f3d"
        ) {
          parsed = decodeEventLog({
            abi: UNISWAP_V4_POOL_ABI,
            data: log.data,
            topics: log.topics,
          });
          version = "V4";
        } else {
          parsed = decodeEventLog({
            abi: UNISWAP_V3_POOL_ABI,
            data: log.data,
            topics: log.topics,
          });
          version = "V3";
        }

        // Ëé∑ÂèñÊ±†Â≠ê‰ø°ÊÅØ
        if (!poolInfos.has(log.address)) {
          console.log(`  üîÑ Ëé∑ÂèñÊ±†Â≠ê‰ø°ÊÅØ: ${log.address}`);
          const poolInfo = await getPoolInfo(log.address);
          if (poolInfo) {
            poolInfos.set(log.address, poolInfo);
            console.log(
              `  ‚úÖ ÊàêÂäüËé∑ÂèñÊ±†Â≠ê‰ø°ÊÅØ: ${poolInfo.token0.symbol}/${poolInfo.token1.symbol}`
            );
          } else {
            console.log(`  ‚ùå Êó†Ê≥ïËé∑ÂèñÊ±†Â≠ê‰ø°ÊÅØ`);
          }
        }

        const poolInfo = poolInfos.get(log.address);
        console.log(`\nüîÑ Swap #${swapCount}:`);
        console.log(`  Ê±†Â≠êÂú∞ÂùÄ: ${log.address}`);
        if (poolInfo) {
          console.log(
            `  ‰∫§ÊòìÂØπ: ${poolInfo.token0.symbol}/${poolInfo.token1.symbol}`
          );
        }
        console.log(`  amount0: ${parsed.args.amount0.toString()}`);
        console.log(`  amount1: ${parsed.args.amount1.toString()}`);

        if (version === "V3" || version === "V4") {
          console.log(`  ‰ª∑Ê†º: ${Number(parsed.args.sqrtPriceX96) / 2 ** 96}`);
          console.log(`  ÊµÅÂä®ÊÄß: ${parsed.args.liquidity.toString()}`);
          console.log(`  tick: ${parsed.args.tick}`);
          if (version === "V4") {
            console.log(`  ÊâãÁª≠Ë¥π: ${parsed.args.fee / 10000}%`);
          }
        }

        // ÂàÜÊûê‰∫§ÊòìÊñπÂêë
        if (poolInfo) {
          const amount0 =
            Number(parsed.args.amount0) / 10 ** poolInfo.token0.decimals;
          const amount1 =
            Number(parsed.args.amount1) / 10 ** poolInfo.token1.decimals;
          if (amount0 < 0) {
            console.log(
              `  ‰∫§ÊòìÊñπÂêë: ${poolInfo.token0.symbol} -> ${poolInfo.token1.symbol}`
            );
            console.log(
              `  ‰∫§ÊòìÈáëÈ¢ù: ${Math.abs(amount0).toFixed(6)} ${
                poolInfo.token0.symbol
              } -> ${amount1.toFixed(6)} ${poolInfo.token1.symbol}`
            );
          } else {
            console.log(
              `  ‰∫§ÊòìÊñπÂêë: ${poolInfo.token1.symbol} -> ${poolInfo.token0.symbol}`
            );
            console.log(
              `  ‰∫§ÊòìÈáëÈ¢ù: ${Math.abs(amount1).toFixed(6)} ${
                poolInfo.token1.symbol
              } -> ${amount0.toFixed(6)} ${poolInfo.token0.symbol}`
            );
          }
        }

        // ‰øùÂ≠ò Swap ‰∫ã‰ª∂‰ø°ÊÅØ
        swapEvents.push({
          version,
          poolAddress: log.address,
          poolInfo,
          parsed,
          log,
        });
      } catch (err) {
        console.log(`  ‚ùå Ëß£ÊûêÂ§±Ë¥•: ${err.message}`);
        console.log(`  ÂéüÂßãÊï∞ÊçÆ:`, log);
      }
    }
  }

  console.log(`\nüìä Swap ‰∫ã‰ª∂ÁªüËÆ°:`);
  console.log(`  ÊÄªÂèëÁé∞ Swap ‰∫ã‰ª∂: ${swapCount}`);
  console.log(`  ÊàêÂäüËß£Êûê: ${swapEvents.length}`);
  console.log(`  Ëß£ÊûêÂ§±Ë¥•: ${swapCount - swapEvents.length}`);

  // ÂàÜÊûê‰∫§ÊòìË∑ØÂæÑ
  if (swapEvents.length > 1) {
    console.log("\nüõ£Ô∏è ‰∫§ÊòìË∑ØÂæÑÂàÜÊûê:");
    console.log(
      "  Ëøô‰∏™‰∫§ÊòìÂåÖÂê´‰∫ÜÂ§ö‰∏™Ê±†Â≠êÁöÑ‰∫§Êç¢ÔºåÂèØËÉΩÊòØÈÄöËøá Uniswap Router ÊâßË°åÁöÑË∑®Ê±†‰∫§Êòì"
    );
    console.log("  ‰∫§ÊòìË∑ØÂæÑ:");

    let totalInput = 0;
    let totalOutput = 0;
    let inputToken = null;
    let outputToken = null;

    for (let i = 0; i < swapEvents.length; i++) {
      const event = swapEvents[i];
      const { poolInfo, parsed } = event;

      if (poolInfo) {
        const amount0 =
          Number(parsed.args.amount0) / 10 ** poolInfo.token0.decimals;
        const amount1 =
          Number(parsed.args.amount1) / 10 ** poolInfo.token1.decimals;

        if (i === 0) {
          // Á¨¨‰∏Ä‰∏™ Swap Á°ÆÂÆöËæìÂÖ•‰ª£Â∏Å
          if (amount0 < 0) {
            inputToken = poolInfo.token0;
            totalInput = Math.abs(amount0);
          } else {
            inputToken = poolInfo.token1;
            totalInput = Math.abs(amount1);
          }
        }

        if (i === swapEvents.length - 1) {
          // ÊúÄÂêé‰∏Ä‰∏™ Swap Á°ÆÂÆöËæìÂá∫‰ª£Â∏Å
          if (amount0 > 0) {
            outputToken = poolInfo.token0;
            totalOutput = amount0;
          } else {
            outputToken = poolInfo.token1;
            totalOutput = amount1;
          }
        }

        console.log(
          `  ${i + 1}. ${poolInfo.token0.symbol}/${poolInfo.token1.symbol} Ê±†`
        );
        console.log(
          `     ËæìÂÖ•: ${Math.abs(amount0 < 0 ? amount0 : amount1).toFixed(6)} ${
            amount0 < 0 ? poolInfo.token0.symbol : poolInfo.token1.symbol
          }`
        );
        console.log(
          `     ËæìÂá∫: ${Math.abs(amount0 > 0 ? amount0 : amount1).toFixed(6)} ${
            amount0 > 0 ? poolInfo.token0.symbol : poolInfo.token1.symbol
          }`
        );
      }
    }

    if (inputToken && outputToken) {
      console.log("\nüí∞ ‰∫§ÊòìÊÄªÁªì:");
      console.log(`  ÊÄªËæìÂÖ•: ${totalInput.toFixed(6)} ${inputToken.symbol}`);
      console.log(`  ÊÄªËæìÂá∫: ${totalOutput.toFixed(6)} ${outputToken.symbol}`);
      if (totalInput > 0 && totalOutput > 0) {
        const price = totalOutput / totalInput;
        console.log(
          `  Âπ≥Âùá‰ª∑Ê†º: 1 ${inputToken.symbol} = ${price.toFixed(6)} ${
            outputToken.symbol
          }`
        );
      }
    }
  }
}
