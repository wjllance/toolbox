// ‰ΩøÁî® viem Êõø‰ª£ ethers.js ÂÆûÁé∞ uniswap rebalance ‰∫§ÊòìÂàÜÊûê
import { createPublicClient, http, parseAbi, decodeEventLog } from "viem";
import { base } from "viem/chains";
import Bottleneck from "bottleneck";

// =============== ÈÖçÁΩÆ ===============
console.log("üöÄ ÂàùÂßãÂåñÂÆ¢Êà∑Á´Ø...");

// RPC ËäÇÁÇπÈÖçÁΩÆ
const RPC_URLS = [
  process.env.RPC_URL,
  "https://base-mainnet.g.alchemy.com/v2/demo",
  "https://base.blockpi.network/v1/rpc/public",
  "https://base.meowrpc.com",
];

// ÂàõÂª∫Â§ö‰∏™ÂÆ¢Êà∑Á´ØÂÆû‰æã
const clients = RPC_URLS.map((url) =>
  createPublicClient({
    chain: base,
    transport: http(url),
  })
);

let currentClientIndex = 0;

// =============== Â∑•ÂÖ∑ÂáΩÊï∞ ===============
function getCurrentClient() {
  return clients[currentClientIndex];
}

function switchClient() {
  currentClientIndex = (currentClientIndex + 1) % clients.length;
  console.log(`üîÑ ÂàáÊç¢Âà∞ RPC ËäÇÁÇπ ${currentClientIndex + 1}`);
  return getCurrentClient();
}

// =============== ÂêàÁ∫¶ ABI ===============
const UNISWAP_V3_ABI = parseAbi([
  "event Burn(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1)",
  "event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1)",
  "event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick)",
  "event Mint(address indexed sender, address indexed owner, int24 indexed tickLower, int24 tickUpper, uint128 amount, uint256 amount0, uint256 amount1)",
]);

const ERC20_ABI = parseAbi([
  "function symbol() view returns (string)",
  "function decimals() view returns (uint8)",
]);

const POOL_ABI = parseAbi([
  "function token0() view returns (address)",
  "function token1() view returns (address)",
]);

// =============== ÈôêÊµÅÂíåÁºìÂ≠ò ===============
const limiter = new Bottleneck({
  maxConcurrent: 1,
  minTime: 2000,
  reservoir: 1,
  reservoirRefreshAmount: 1,
  reservoirRefreshInterval: 2000,
});

const tokenCache = new Map();

// =============== Ê†∏ÂøÉÂáΩÊï∞ ===============
async function withRetry(fn, maxRetries = 3, initialDelay = 5000) {
  let retries = 0;
  let delay = initialDelay;

  while (true) {
    try {
      return await fn();
    } catch (error) {
      if (retries >= maxRetries) {
        throw error;
      }

      if (error.cause?.status === 429) {
        console.log(
          `‚è≥ ÈÅáÂà∞È¢ëÁéáÈôêÂà∂ÔºåÁ≠âÂæÖ ${delay / 1000} ÁßíÂêéÈáçËØï... (${
            retries + 1
          }/${maxRetries})`
        );
        await new Promise((resolve) => setTimeout(resolve, delay));
        delay *= 2;
        retries++;
        switchClient();
        continue;
      }

      throw error;
    }
  }
}

async function getTokenInfo(address) {
  if (tokenCache.has(address)) {
    console.log(`üì¶ ‰ΩøÁî®ÁºìÂ≠òÁöÑ‰ª£Â∏Å‰ø°ÊÅØ: ${address}`);
    return tokenCache.get(address);
  }

  try {
    const [symbol, decimals] = await Promise.all([
      limiter.schedule(() =>
        withRetry(() =>
          getCurrentClient().readContract({
            address,
            abi: ERC20_ABI,
            functionName: "symbol",
          })
        )
      ),
      limiter.schedule(() =>
        withRetry(() =>
          getCurrentClient().readContract({
            address,
            abi: ERC20_ABI,
            functionName: "decimals",
          })
        )
      ),
    ]);

    const tokenInfo = { address, symbol, decimals };
    tokenCache.set(address, tokenInfo);
    return tokenInfo;
  } catch (error) {
    console.error(`‚ùå Ëé∑Âèñ‰ª£Â∏Å‰ø°ÊÅØÂ§±Ë¥•: ${address}`, error);
    return null;
  }
}

// =============== ‰∏ªÂáΩÊï∞ ===============
async function analyzeTransaction(txHash) {
  console.log(`\nüìù ÂºÄÂßãÂàÜÊûê‰∫§Êòì: ${txHash}`);
  console.log("‚è≥ Ëé∑Âèñ‰∫§ÊòìÊî∂ÊçÆ...");

  const receipt = await withRetry(() =>
    getCurrentClient().getTransactionReceipt({ hash: txHash })
  );
  console.log(`‚úÖ ‰∫§ÊòìÊî∂ÊçÆËé∑ÂèñÊàêÂäüÔºåÂå∫ÂùóÂè∑: ${receipt.blockNumber}`);

  let poolAddress = null;
  let token0 = null;
  let token1 = null;
  let events = [];

  console.log(`\nüîç ÂºÄÂßãÂàÜÊûê ${receipt.logs.length} Êù°Êó•Âøó...`);

  // ÂÆö‰πâ Uniswap V3 ‰∫ã‰ª∂ÁöÑ topic hash
  const UNISWAP_V3_EVENT_TOPICS = [
    "0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c", // Burn
    "0x40d0efd1a53d60ecbf40971b9daf7dc90178c3aadc7aab1765632738fa8b8f01", // Collect
    "0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67", // Swap
    "0x7a53080ba414158be7ec69b987b5fb7d07dee101fe85488f0853ae16239d0bde", // Mint
  ];

  // Ëá™Âä®ËØÜÂà´ÊâÄÊúâ Uniswap V3 Ê±†Â≠êÂú∞ÂùÄ
  const poolAddresses = new Set();
  for (const log of receipt.logs) {
    if (UNISWAP_V3_EVENT_TOPICS.includes(log.topics[0])) {
      poolAddresses.add(log.address.toLowerCase());
    }
  }

  console.log("\nüèä ÂèëÁé∞ÁöÑ Uniswap V3 Ê±†Â≠êÂú∞ÂùÄÔºö");
  Array.from(poolAddresses).forEach((addr, i) => {
    console.log(`  ${i + 1}. ${addr}`);
  });

  // Â§ÑÁêÜÊâÄÊúâÊó•Âøó
  for (const log of receipt.logs) {
    // Âè™Â§ÑÁêÜ Uniswap V3 Ê±†Â≠êÁöÑ log
    if (!poolAddresses.has(log.address.toLowerCase())) {
      continue;
    }

    console.log(`\n[PoolLog] Â§ÑÁêÜÊ±†Â≠ê ${log.address} ÁöÑ‰∫ã‰ª∂`);
    console.log(`  Topic0: ${log.topics[0]}`);

    try {
      const parsed = decodeEventLog({
        abi: UNISWAP_V3_ABI,
        data: log.data,
        topics: log.topics,
      });

      if (parsed.eventName === "Swap" && !poolAddress) {
        poolAddress = log.address;
        console.log("\nüèä ÂèëÁé∞ Uniswap V3 Ê±†Â≠êÂú∞ÂùÄ...");
        console.log(`üìç Ê±†Â≠êÂú∞ÂùÄ: ${poolAddress}`);

        console.log("‚è≥ Ëé∑Âèñ‰ª£Â∏ÅÂú∞ÂùÄ...");
        const [token0Address, token1Address] = await Promise.all([
          withRetry(() =>
            getCurrentClient().readContract({
              abi: POOL_ABI,
              address: poolAddress,
              functionName: "token0",
            })
          ),
          withRetry(() =>
            getCurrentClient().readContract({
              abi: POOL_ABI,
              address: poolAddress,
              functionName: "token1",
            })
          ),
        ]);

        console.log(`‚úÖ Token0 Âú∞ÂùÄ: ${token0Address}`);
        console.log(`‚úÖ Token1 Âú∞ÂùÄ: ${token1Address}`);

        console.log("\n‚è≥ Ëé∑Âèñ‰ª£Â∏Å‰ø°ÊÅØ...");
        token0 = await getTokenInfo(token0Address);
        token1 = await getTokenInfo(token1Address);

        if (token0 && token1) {
          console.log("\nüìä Ê±†Â≠ê‰ø°ÊÅØ:");
          console.log(`  Pool: ${poolAddress}`);
          console.log(
            `  Token0: ${token0.symbol} (${token0.decimals} decimals)`
          );
          console.log(
            `  Token1: ${token1.symbol} (${token1.decimals} decimals)\n`
          );
        }
      }

      if (parsed.eventName) {
        events.push({ log, parsed });
      }
    } catch (err) {
      // Èùû Uniswap Êó•ÂøóÔºåÂøΩÁï•
      continue;
    }
  }

  // Â§ÑÁêÜÊâÄÊúâ‰∫ã‰ª∂
  if (token0 && token1) {
    let mintEventCount = 0;
    for (const { log, parsed } of events) {
      const format = (val, decimals) => Number(val) / 10 ** decimals;

      console.log(`\n[‰∫ã‰ª∂Ëß£Êûê] ${parsed.eventName}:`);
      console.log(`  Topics: ${JSON.stringify(log.topics)}`);

      switch (parsed.eventName) {
        case "Burn":
          console.log(`\nüî• Burn ‰∫ã‰ª∂:`);
          console.log(`  liquidity: ${parsed.args.liquidity.toString()}`);
          console.log(
            `  amount0: ${format(parsed.args.amount0, token0.decimals)} ${
              token0.symbol
            }`
          );
          console.log(
            `  amount1: ${format(parsed.args.amount1, token1.decimals)} ${
              token1.symbol
            }`
          );
          break;

        case "Collect":
          console.log(`\nüí∞ Collect ‰∫ã‰ª∂:`);
          console.log(
            `  amount0: ${format(parsed.args.amount0, token0.decimals)} ${
              token0.symbol
            }`
          );
          console.log(
            `  amount1: ${format(parsed.args.amount1, token1.decimals)} ${
              token1.symbol
            }`
          );
          break;

        case "Swap":
          console.log(`\nüîÅ Swap ‰∫ã‰ª∂:`);
          const amount0 = format(parsed.args.amount0, token0.decimals);
          const amount1 = format(parsed.args.amount1, token1.decimals);
          if (amount0 < 0) {
            console.log(
              `  Áî® ${Math.abs(amount0)} ${token0.symbol} Êç¢Âèñ ${amount1} ${
                token1.symbol
              }`
            );
          } else {
            console.log(
              `  Áî® ${Math.abs(amount1)} ${token1.symbol} Êç¢Âèñ ${amount0} ${
                token0.symbol
              }`
            );
          }
          break;

        case "Mint":
          mintEventCount++;
          console.log(`\n‚ûï Mint ‰∫ã‰ª∂:`);
          console.log(`  sender: ${parsed.args.sender}`);
          console.log(`  owner: ${parsed.args.owner}`);
          console.log(`  tickLower: ${parsed.args.tickLower}`);
          console.log(`  tickUpper: ${parsed.args.tickUpper}`);
          console.log(`  liquidity: ${parsed.args.amount.toString()}`);
          console.log(
            `  amount0: ${format(parsed.args.amount0, token0.decimals)} ${
              token0.symbol
            }`
          );
          console.log(
            `  amount1: ${format(parsed.args.amount1, token1.decimals)} ${
              token1.symbol
            }`
          );
          break;
      }
    }
    console.log(`\n[ÁªüËÆ°] Êú¨Ê¨°ÂÖ±Ëß£ÊûêÂá∫ Mint ‰∫ã‰ª∂Êï∞Èáè: ${mintEventCount}`);
  } else {
    console.error("‚ùå Êó†Ê≥ïËé∑Âèñ‰ª£Â∏Å‰ø°ÊÅØÔºåË∑≥Ëøá‰∫ã‰ª∂ÂàÜÊûê");
  }

  console.log("\n‚ú® ‰∫§ÊòìÂàÜÊûêÂÆåÊàê!");
}

// =============== ÊâßË°å ===============
const TX_HASH =
  "0xdcafedbc4517fed5409046081fb47fa3c30139e358585bddb8c86900a7f2ab99";

console.log("üì° ËøûÊé•Âà∞ Base ÁΩëÁªú...");
analyzeTransaction(TX_HASH);
